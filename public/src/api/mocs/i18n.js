import { onResponse } from '@/api/interceptor-service'

export const I18N_DATA_MOCK = {
  data: {
    data: {
      id: '2844',
      type: 'i18n',
      attributes: {
        data: {
          home: {
            title: 'New Main Page',
          },
          registration: {
            title: 'Registration for event',
            submitBtn: 'Sign up',
            profileTitle: 'Profile information',
            email: 'Email',
            passwordTitle: 'Password',
            repeatPasswordTitle: 'Repeat password',
            passwordPh: 'Enter your password',
            next: 'Next',
            auth: 'Authorization',
            back: 'Back',
            repeatEqual: 'Passwords do not match',
            error: 'Please, fill all required fiedls',
          },
          auth: {
            title: 'Sign in or Sign up',
            recoveryPassword: 'Forgot your password?',
            submit: 'Next',
            submitEnter: 'Log in',
            authError: 'Authorization error, invalid username or password!',
            authSuccess: 'Successful authorization!',
            regDateError: {
              text: 'Registration is available from',
              divider: 'to',
            },
            backDist: 'Event',
            statusWordsRegistration: {
              entity: 'Registration for event',
              before: 'will begin',
              during: 'will end on',
              after: 'is ended',
            },
            statusWordsEvent: {
              entity: 'Event',
              before: 'will begin',
              during: 'will end',
              after: 'is ended',
            },
            email: {
              placeholder: 'name@company.ru',
              errorMessageLack: 'Enter email',
              errorMessageFormat: 'Incorrect email format',
            },
            password: {
              label: 'Password',
              placeholder: 'Enter password',
              errorMessage: 'Please enter your password',
              errorLength: 'Password must be at least 6 characters',
            },
          },
          shop: {
            title: 'Shop',
            products: {
              tickets: 'Tickets',
              additionally: 'Additionally',
            },
            alerts: {
              oneTicket:
                'You can purchase 1 ticket and several additional services of the organizer',
              successOrder: 'You have successfully placed an order',
              entity: 'Selling',
              before: 'will begin on',
              during: 'will end on',
              after: 'is finished at',
            },
            btn: {
              order: 'add in order',
              delete: 'delete',
              makeOrder: 'make order',
            },
            product: {
              inBasket: 'in basket',
              helpText: 'Цены на сайте автоматически конвертируются между ₽, $ и € Курс:',
            },
            orderBar: {
              sum: 'Sum',
              selected: 'Selected items',
              product: 'pcs',
            },
          },
          orders: {
            title: 'My orders',
            orderCard: {
              order: '№ order',
              date: 'Date of issue',
              sum: 'Sum',
              products: 'Products',
              thing: 'pcs',
              status: 'Status',
              payment: 'Payment',
            },
            status: {
              created: 'Created',
              canceled: 'Canceled',
            },
            payment: {
              paid: 'Paid',
              unpaid: 'Unpaid',
            },
            btn: {
              detail: 'detail',
              more: 'show more',
            },
            emptyOrders: {
              text: 'There are no orders',
              link: 'Go to the shop',
            },
          },
          order: {
            title: 'Order',
            date: 'Date of issue',
            compositionOrder: 'Order list',
            selectLabel: 'Choose payment option',
            paymentOrder: 'Payment',
            orderPrice: 'Order price',
            alerts: {
              canceledOrder: 'You have canceled the order',
            },
            orderCard: {
              name: 'Name of product',
              quantity: 'Quantity',
              price: 'Price',
              thing: 'pcs',
              isAvailable: 'Yes',
              isNotAvailable: {
                closedSelling: 'Нет',
                blockedRate: 'Заблокирован из-за резкого скачка валют',
              },
            },
            status: {
              created: 'Created',
              canceled: 'Canceled',
            },
            payment: {
              paid: 'paid',
              unpaid: 'unpaid',
            },
            btn: {
              canceled: 'Cancel order',
              payment: 'Go to the payment',
              invoice: 'Download invoice',
            },
            modalCanceledOrder: {
              title: 'Cancel order',
              text: 'Do you really want to cancel',
              order: 'order',
              btn: {
                close: 'Close',
                yes: 'Yes, cancel',
              },
            },
            providerTypes: {
              bankCard: 'Bank card',
              invoice: 'Invoice',
            },
          },
          payment: {
            error: {
              title: 'Payment error',
              subtitle: '',
              info: {
                title: 'Repeat paymant or back to order',
                text: 'Order did not proccess. Back to',
                order: 'order',
              },
              text: "Unfortunately, order №{0} haven't been payed",
            },
            success: {
              title: 'Successful payment',
              subtitle: '',
              info: {
                title: 'Order details is sent to your email',
                text: 'Thank you!',
              },
              text: 'Order №{0} have been successful payed',
            },
            orderCard: {
              name: 'Name of product',
              quantity: 'Quantity',
              price: 'price',
              thing: 'pcs',
            },
            btn: {
              repeatPay: 'Repeat payment',
            },
          },
          checkEmail: {
            title: 'Password recovery',
            firstSentence: 'Please, check your email',
            secondSentence: 'to recover password',
            backDist: 'Authorization',
          },
          recover: {
            error: "User with this email doesn't exist",
            title: 'Password recovery',
            submit: 'Recovery',
            backDist: 'Authorization',
          },
          registrationSuccess: {
            title: 'Successful registration',
            firstSentence: 'Check your email',
            secondSentence: 'for confirmation email',
            submit: 'Profile',
          },
          resetPassword: {
            errorMessage: 'Reset password error',
            title: 'Reset password',
            backDist: 'Authorization',
            password: {
              label: 'New password',
            },
            passwordConfirm: {
              label: 'Repeat your password',
              ruleLack: 'Please, repeat your new password',
              ruleDiff: 'Passwords dont match',
            },
            submit: 'Save password',
          },
          resetSuccess: {
            title: 'Your password is successfully changed',
            text: 'Continue authorization with new password',
            submit: 'Authorization',
          },
          emailConfirm: {
            title: 'Email confirmed successfuly!',
            text: 'You can log in with your email and password',
            submit: 'Profile',
          },
          profile: {
            alerts: {
              emailNotConfirmed: 'Email not confirmed! Follow the link sent to you by email',
              resend: 'Resend',
            },
            password: {
              label: 'Password',
              savePassword: 'Save password',
              newPasswordLabel: 'New password',
              repeatNewPasswordLabel: 'Repeat new password',
              change: 'Your password is successfully changed',
            },
            heading: 'Profile data',
            saveEmail: 'Save email',
            submit: 'Save',
            succesAlert: 'Updated successfully!',
            emailConfirm: 'Letter is sended to your inbox!',
            emailChange: 'Your email is successfully changed',
          },
          events: {
            title: 'Events',
            tabs: {
              actual: 'Active',
              past: 'Past',
            },
            registration: 'Registration',
            toEvent: 'Event Page',
          },
          error: {
            text: {
              caption: {
                404: 'Page not found',
                500: 'Site is currently not available',
              },
              description: {
                404: 'You can choose other page of website, or just go to start page',
                500: 'We know about the problem and trying to fix it',
              },
            },
            button: 'Start page',
          },
          months: [
            'Jan',
            'Feb',
            'March',
            'April',
            'May',
            'June',
            'July',
            'Aug',
            'Sep',
            'Oct',
            'Nov',
            'Dec',
          ],
          header: {
            titles: {
              index: 'Main',
              'event-eventId-store': 'Store',
              'event-eventId-orders': 'My orders',
              'event-eventId-profile': 'Profile',
              'event-eventId-orders-id': 'View Order',
              'event-eventId-orders-payment': 'Payment State',
              events: 'Event List',
              error: 'An error occurred',
              eventEventIdRequestId: {
                thesis: 'Submit thesis',
                electronicPoster: 'Submit electronic poster',
                researchArticle: 'Submit research article',
                video: 'Submit video',
                annotationReport: 'Submit annotation report',
                question: 'Submit question',
                request: 'Submit request',
              },
            },
          },
          fieldSettings: {
            other: 'Add your option',
            copy: 'Copy field',
          },
          buttons: {
            collapseDescription: 'Collapse description',
            expandDescription: 'Expand description',
          },
          initValidation: {
            required: 'Field is required!',
            wrongDateFormat: 'Date Format must be DD-MM-YYYY',
          },
          uploader: {
            description: 'Drag and drop file',
            link: 'Or click here for download',
          },
          eventCard: {
            alertSuccess: 'Successful registration!',
            duringRegistration: 'Registration is open',
            beforeRegistration: 'Registration did not open',
            endedRegistration: 'Online registration is closed',
          },
          sideBar: {
            backToEvents: 'All events',
            invitationFile: 'Download invitation letter',
          },
          stream: {
            errorMessage:
              'Возможно, есть проблемы с загрузкой трансляции, попробуйте перезагрузить страницу или подождите еще немного',
          },
          request: {
            requestAlertTotalLimit: 'Приём завершён в связи с достижением общего лимита',
            thesis: {
              requestType: 'Material type',
              requestAlertStatus: 'Status',
              requestSuccess: 'Accepted',
              sentRequests: 'Sent thesis',
              requestDate: 'Submission date',
              requestAlertCount: 'Acceptable quantity to send',
              requestAlertCountLimit: 'You can send',
              sendBtn: 'Submit',
              sendSuccessMessage: 'Material is sended!',
              requestAlertSendDisabled: 'Sending new thesis is not available',
              requestStatus: {
                inProgress: 'The reception goes from {0} to {1}',
                willStart: 'The reception will start with {0}',
                ended: 'The reception is over {0}',
              },
              deleteSuccess: 'Delete successfully!',
              requestAlertLimit:
                'The limit has been reached. To submit a new thesis, delete the previously submitted one',
              newRequestTitle: 'New thesis',
            },
            electronicPoster: {
              requestType: 'Material type',
              requestAlertStatus: 'Status',
              requestSuccess: 'Accepted',
              sentRequests: 'Sent poster',
              requestDate: 'Submission date',
              requestAlertCount: 'Acceptable quantity to send',
              requestAlertCountLimit: 'You can send',
              sendBtn: 'Submit',
              requestAlertSendDisabled: 'Sending new electronic poster is not available',
              sendSuccessMessage: 'Electronic Poster is sended!',
              requestStatus: {
                inProgress: 'The reception goes from {0} to {1}',
                willStart: 'The reception will start with {0}',
                ended: 'The reception is over {0}',
              },
              deleteSuccess: 'Delete successfully!',
              requestAlertLimit:
                'The limit has been reached. To submit a new electronic poster, delete the previously submitted one',
              newRequestTitle: 'New electronic poster',
            },
            researchArticle: {
              requestType: 'Material type',
              requestAlertStatus: 'Status',
              requestSuccess: 'Accepted',
              sentRequests: 'Sent article',
              requestDate: 'Submission date',
              requestAlertCount: 'Acceptable quantity to send',
              requestAlertCountLimit: 'You can send',
              sendBtn: 'Submit',
              requestAlertSendDisabled: 'Sending new article is not available',
              sendSuccessMessage: 'Research Article is sended!',
              requestStatus: {
                inProgress: 'The reception goes from {0} to {1}',
                willStart: 'The reception will start with {0}',
                ended: 'The reception is over {0}',
              },
              deleteSuccess: 'Delete successfully!',
              requestAlertLimit:
                'The limit has been reached. To submit a new research article, delete the previously submitted one',
              newRequestTitle: 'New research article',
            },
            video: {
              requestType: 'Material type',
              requestAlertStatus: 'Status',
              sentRequests: 'Sent video',
              requestSuccess: 'Accepted',
              requestDate: 'Submission date',
              requestAlertCount: 'Acceptable quantity to send',
              requestAlertCountLimit: 'You can send',
              sendBtn: 'Submit',
              requestAlertSendDisabled: 'Sending new video is not available',
              sendSuccessMessage: 'Video is sended!',
              requestStatus: {
                inProgress: 'The reception goes from {0} to {1}',
                willStart: 'The reception will start with {0}',
                ended: 'The reception is over {0}',
              },
              deleteSuccess: 'Delete successfully!',
              requestAlertLimit:
                'The limit has been reached. To submit a new video, delete the previously submitted one',
              newRequestTitle: 'New video',
            },
            annotationReport: {
              requestType: 'Material type',
              requestAlertStatus: 'Status',
              sentRequests: 'Sent annotation report',
              requestSuccess: 'Accepted',
              requestDate: 'Submission date',
              requestAlertCount: 'Acceptable quantity to send',
              requestAlertCountLimit: 'You can send',
              sendBtn: 'Submit',
              requestAlertSendDisabled: 'Sending new annotation report is not available',
              sendSuccessMessage: 'Annotation Report is sended!',
              requestStatus: {
                inProgress: 'The reception goes from {0} to {1}',
                willStart: 'The reception will start with {0}',
                ended: 'The reception is over {0}',
              },
              deleteSuccess: 'Delete successfully!',
              requestAlertLimit:
                'The limit has been reached. To submit a new annotation report, delete the previously submitted one',
              newRequestTitle: 'New annotation report',
            },
            question: {
              requestType: 'Material type',
              requestAlertStatus: 'Status',
              sentRequests: 'Sent question',
              requestSuccess: 'Accepted',
              requestDate: 'Submission date',
              requestAlertCount: 'Acceptable quantity to send',
              requestAlertCountLimit: 'You can send',
              sendBtn: 'Submit',
              requestAlertSendDisabled: 'Sending new question is not available',
              sendSuccessMessage: 'Question is sended!',
              requestStatus: {
                inProgress: 'The reception goes from {0} to {1}',
                willStart: 'The reception will start with {0}',
                ended: 'The reception is over {0}',
              },
              deleteSuccess: 'Delete successfully!',
              requestAlertLimit:
                'The limit has been reached. To submit a new question, delete the previously submitted one',
              newRequestTitle: 'New question',
            },
            request: {
              requestType: 'Material type',
              requestAlertStatus: 'Status',
              requestSuccess: 'Accepted',
              requestDate: 'Submission date',
              requestAlertCount: 'Acceptable quantity to send',
              requestAlertCountLimit: 'You can send',
              sentRequests: 'Sent request',
              requestAlertSendDisabled: 'Sending new request is not available',
              sendSuccessMessage: 'Request is sended!',
              requestStatus: {
                inProgress: 'The reception goes from {0} to {1}',
                willStart: 'The reception will start with {0}',
                ended: 'The reception is over {0}',
              },
              deleteSuccess: 'Delete successfully!',
              requestAlertLimit:
                'The limit has been reached. To submit a new request, delete the previously submitted one',
              newRequestTitle: 'New request',
              sendBtn: 'Join',
            },
          },
        },
      },
    },
  },
}

export const I18N_PAYLOAD = {
  id: '2844',
  type: 'i18n',
  attributes: {
    data: {
      home: {
        title: 'New Main Page',
      },
      registration: {
        title: 'Registration for event',
        submitBtn: 'Sign up',
        profileTitle: 'Profile information',
        email: 'Email',
        passwordTitle: 'Password',
        repeatPasswordTitle: 'Repeat password',
        passwordPh: 'Enter your password',
        next: 'Next',
        auth: 'Authorization',
        back: 'Back',
        repeatEqual: 'Passwords do not match',
        error: 'Please, fill all required fiedls',
      },
      auth: {
        title: 'Sign in or Sign up',
        recoveryPassword: 'Forgot your password?',
        submit: 'Next',
        submitEnter: 'Log in',
        authError: 'Authorization error, invalid username or password!',
        authSuccess: 'Successful authorization!',
        regDateError: {
          text: 'Registration is available from',
          divider: 'to',
        },
        backDist: 'Event',
        statusWordsRegistration: {
          entity: 'Registration for event',
          before: 'will begin',
          during: 'will end on',
          after: 'is ended',
        },
        statusWordsEvent: {
          entity: 'Event',
          before: 'will begin',
          during: 'will end',
          after: 'is ended',
        },
        email: {
          placeholder: 'name@company.ru',
          errorMessageLack: 'Enter email',
          errorMessageFormat: 'Incorrect email format',
        },
        password: {
          label: 'Password',
          placeholder: 'Enter password',
          errorMessage: 'Please enter your password',
          errorLength: 'Password must be at least 6 characters',
        },
      },
      shop: {
        title: 'Shop',
        products: {
          tickets: 'Tickets',
          additionally: 'Additionally',
        },
        alerts: {
          oneTicket: 'You can purchase 1 ticket and several additional services of the organizer',
          successOrder: 'You have successfully placed an order',
          entity: 'Selling',
          before: 'will begin on',
          during: 'will end on',
          after: 'is finished at',
        },
        btn: {
          order: 'add in order',
          delete: 'delete',
          makeOrder: 'make order',
        },
        product: {
          inBasket: 'in basket',
          helpText: 'Цены на сайте автоматически конвертируются между ₽, $ и € Курс:',
        },
        orderBar: {
          sum: 'Sum',
          selected: 'Selected items',
          product: 'pcs',
        },
      },
      orders: {
        title: 'My orders',
        orderCard: {
          order: '№ order',
          date: 'Date of issue',
          sum: 'Sum',
          products: 'Products',
          thing: 'pcs',
          status: 'Status',
          payment: 'Payment',
        },
        status: {
          created: 'Created',
          canceled: 'Canceled',
        },
        payment: {
          paid: 'Paid',
          unpaid: 'Unpaid',
        },
        btn: {
          detail: 'detail',
          more: 'show more',
        },
        emptyOrders: {
          text: 'There are no orders',
          link: 'Go to the shop',
        },
      },
      order: {
        title: 'Order',
        date: 'Date of issue',
        compositionOrder: 'Order list',
        selectLabel: 'Choose payment option',
        paymentOrder: 'Payment',
        orderPrice: 'Order price',
        alerts: {
          canceledOrder: 'You have canceled the order',
        },
        orderCard: {
          name: 'Name of product',
          quantity: 'Quantity',
          price: 'Price',
          thing: 'pcs',
          isAvailable: 'Yes',
          isNotAvailable: {
            closedSelling: 'Нет',
            blockedRate: 'Заблокирован из-за резкого скачка валют',
          },
        },
        status: {
          created: 'Created',
          canceled: 'Canceled',
        },
        payment: {
          paid: 'paid',
          unpaid: 'unpaid',
        },
        btn: {
          canceled: 'Cancel order',
          payment: 'Go to the payment',
          invoice: 'Download invoice',
        },
        modalCanceledOrder: {
          title: 'Cancel order',
          text: 'Do you really want to cancel',
          order: 'order',
          btn: {
            close: 'Close',
            yes: 'Yes, cancel',
          },
        },
        providerTypes: {
          bankCard: 'Bank card',
          invoice: 'Invoice',
        },
      },
      payment: {
        error: {
          title: 'Payment error',
          subtitle: '',
          info: {
            title: 'Repeat paymant or back to order',
            text: 'Order did not proccess. Back to',
            order: 'order',
          },
          text: "Unfortunately, order №{0} haven't been payed",
        },
        success: {
          title: 'Successful payment',
          subtitle: '',
          info: {
            title: 'Order details is sent to your email',
            text: 'Thank you!',
          },
          text: 'Order №{0} have been successful payed',
        },
        orderCard: {
          name: 'Name of product',
          quantity: 'Quantity',
          price: 'price',
          thing: 'pcs',
        },
        btn: {
          repeatPay: 'Repeat payment',
        },
      },
      checkEmail: {
        title: 'Password recovery',
        firstSentence: 'Please, check your email',
        secondSentence: 'to recover password',
        backDist: 'Authorization',
      },
      recover: {
        error: "User with this email doesn't exist",
        title: 'Password recovery',
        submit: 'Recovery',
        backDist: 'Authorization',
      },
      registrationSuccess: {
        title: 'Successful registration',
        firstSentence: 'Check your email',
        secondSentence: 'for confirmation email',
        submit: 'Profile',
      },
      resetPassword: {
        errorMessage: 'Reset password error',
        title: 'Reset password',
        backDist: 'Authorization',
        password: {
          label: 'New password',
        },
        passwordConfirm: {
          label: 'Repeat your password',
          ruleLack: 'Please, repeat your new password',
          ruleDiff: 'Passwords dont match',
        },
        submit: 'Save password',
      },
      resetSuccess: {
        title: 'Your password is successfully changed',
        text: 'Continue authorization with new password',
        submit: 'Authorization',
      },
      emailConfirm: {
        title: 'Email confirmed successfuly!',
        text: 'You can log in with your email and password',
        submit: 'Profile',
      },
      profile: {
        alerts: {
          emailNotConfirmed: 'Email not confirmed! Follow the link sent to you by email',
          resend: 'Resend',
        },
        password: {
          label: 'Password',
          savePassword: 'Save password',
          newPasswordLabel: 'New password',
          repeatNewPasswordLabel: 'Repeat new password',
          change: 'Your password is successfully changed',
        },
        heading: 'Profile data',
        saveEmail: 'Save email',
        submit: 'Save',
        succesAlert: 'Updated successfully!',
        emailConfirm: 'Letter is sended to your inbox!',
        emailChange: 'Your email is successfully changed',
      },
      events: {
        title: 'Events',
        tabs: {
          actual: 'Active',
          past: 'Past',
        },
        registration: 'Registration',
        toEvent: 'Event Page',
      },
      error: {
        text: {
          caption: {
            404: 'Page not found',
            500: 'Site is currently not available',
          },
          description: {
            404: 'You can choose other page of website, or just go to start page',
            500: 'We know about the problem and trying to fix it',
          },
        },
        button: 'Start page',
      },
      months: [
        'Jan',
        'Feb',
        'March',
        'April',
        'May',
        'June',
        'July',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec',
      ],
      header: {
        titles: {
          index: 'Main',
          'event-eventId-store': 'Store',
          'event-eventId-orders': 'My orders',
          'event-eventId-profile': 'Profile',
          'event-eventId-orders-id': 'View Order',
          'event-eventId-orders-payment': 'Payment State',
          events: 'Event List',
          error: 'An error occurred',
          eventEventIdRequestId: {
            thesis: 'Submit thesis',
            electronicPoster: 'Submit electronic poster',
            researchArticle: 'Submit research article',
            video: 'Submit video',
            annotationReport: 'Submit annotation report',
            question: 'Submit question',
            request: 'Submit request',
          },
        },
      },
      fieldSettings: {
        other: 'Add your option',
        copy: 'Copy field',
      },
      buttons: {
        collapseDescription: 'Collapse description',
        expandDescription: 'Expand description',
      },
      initValidation: {
        required: 'Field is required!',
        wrongDateFormat: 'Date Format must be DD-MM-YYYY',
      },
      uploader: {
        description: 'Drag and drop file',
        link: 'Or click here for download',
      },
      eventCard: {
        alertSuccess: 'Successful registration!',
        duringRegistration: 'Registration is open',
        beforeRegistration: 'Registration did not open',
        endedRegistration: 'Online registration is closed',
      },
      sideBar: {
        backToEvents: 'All events',
        invitationFile: 'Download invitation letter',
      },
      stream: {
        errorMessage:
          'Возможно, есть проблемы с загрузкой трансляции, попробуйте перезагрузить страницу или подождите еще немного',
      },
      request: {
        requestAlertTotalLimit: 'Приём завершён в связи с достижением общего лимита',
        thesis: {
          requestType: 'Material type',
          requestAlertStatus: 'Status',
          requestSuccess: 'Accepted',
          sentRequests: 'Sent thesis',
          requestDate: 'Submission date',
          requestAlertCount: 'Acceptable quantity to send',
          requestAlertCountLimit: 'You can send',
          sendBtn: 'Submit',
          sendSuccessMessage: 'Material is sended!',
          requestAlertSendDisabled: 'Sending new thesis is not available',
          requestStatus: {
            inProgress: 'The reception goes from {0} to {1}',
            willStart: 'The reception will start with {0}',
            ended: 'The reception is over {0}',
          },
          deleteSuccess: 'Delete successfully!',
          requestAlertLimit:
            'The limit has been reached. To submit a new thesis, delete the previously submitted one',
          newRequestTitle: 'New thesis',
        },
        electronicPoster: {
          requestType: 'Material type',
          requestAlertStatus: 'Status',
          requestSuccess: 'Accepted',
          sentRequests: 'Sent poster',
          requestDate: 'Submission date',
          requestAlertCount: 'Acceptable quantity to send',
          requestAlertCountLimit: 'You can send',
          sendBtn: 'Submit',
          requestAlertSendDisabled: 'Sending new electronic poster is not available',
          sendSuccessMessage: 'Electronic Poster is sended!',
          requestStatus: {
            inProgress: 'The reception goes from {0} to {1}',
            willStart: 'The reception will start with {0}',
            ended: 'The reception is over {0}',
          },
          deleteSuccess: 'Delete successfully!',
          requestAlertLimit:
            'The limit has been reached. To submit a new electronic poster, delete the previously submitted one',
          newRequestTitle: 'New electronic poster',
        },
        researchArticle: {
          requestType: 'Material type',
          requestAlertStatus: 'Status',
          requestSuccess: 'Accepted',
          sentRequests: 'Sent article',
          requestDate: 'Submission date',
          requestAlertCount: 'Acceptable quantity to send',
          requestAlertCountLimit: 'You can send',
          sendBtn: 'Submit',
          requestAlertSendDisabled: 'Sending new article is not available',
          sendSuccessMessage: 'Research Article is sended!',
          requestStatus: {
            inProgress: 'The reception goes from {0} to {1}',
            willStart: 'The reception will start with {0}',
            ended: 'The reception is over {0}',
          },
          deleteSuccess: 'Delete successfully!',
          requestAlertLimit:
            'The limit has been reached. To submit a new research article, delete the previously submitted one',
          newRequestTitle: 'New research article',
        },
        video: {
          requestType: 'Material type',
          requestAlertStatus: 'Status',
          sentRequests: 'Sent video',
          requestSuccess: 'Accepted',
          requestDate: 'Submission date',
          requestAlertCount: 'Acceptable quantity to send',
          requestAlertCountLimit: 'You can send',
          sendBtn: 'Submit',
          requestAlertSendDisabled: 'Sending new video is not available',
          sendSuccessMessage: 'Video is sended!',
          requestStatus: {
            inProgress: 'The reception goes from {0} to {1}',
            willStart: 'The reception will start with {0}',
            ended: 'The reception is over {0}',
          },
          deleteSuccess: 'Delete successfully!',
          requestAlertLimit:
            'The limit has been reached. To submit a new video, delete the previously submitted one',
          newRequestTitle: 'New video',
        },
        annotationReport: {
          requestType: 'Material type',
          requestAlertStatus: 'Status',
          sentRequests: 'Sent annotation report',
          requestSuccess: 'Accepted',
          requestDate: 'Submission date',
          requestAlertCount: 'Acceptable quantity to send',
          requestAlertCountLimit: 'You can send',
          sendBtn: 'Submit',
          requestAlertSendDisabled: 'Sending new annotation report is not available',
          sendSuccessMessage: 'Annotation Report is sended!',
          requestStatus: {
            inProgress: 'The reception goes from {0} to {1}',
            willStart: 'The reception will start with {0}',
            ended: 'The reception is over {0}',
          },
          deleteSuccess: 'Delete successfully!',
          requestAlertLimit:
            'The limit has been reached. To submit a new annotation report, delete the previously submitted one',
          newRequestTitle: 'New annotation report',
        },
        question: {
          requestType: 'Material type',
          requestAlertStatus: 'Status',
          sentRequests: 'Sent question',
          requestSuccess: 'Accepted',
          requestDate: 'Submission date',
          requestAlertCount: 'Acceptable quantity to send',
          requestAlertCountLimit: 'You can send',
          sendBtn: 'Submit',
          requestAlertSendDisabled: 'Sending new question is not available',
          sendSuccessMessage: 'Question is sended!',
          requestStatus: {
            inProgress: 'The reception goes from {0} to {1}',
            willStart: 'The reception will start with {0}',
            ended: 'The reception is over {0}',
          },
          deleteSuccess: 'Delete successfully!',
          requestAlertLimit:
            'The limit has been reached. To submit a new question, delete the previously submitted one',
          newRequestTitle: 'New question',
        },
        request: {
          requestType: 'Material type',
          requestAlertStatus: 'Status',
          requestSuccess: 'Accepted',
          requestDate: 'Submission date',
          requestAlertCount: 'Acceptable quantity to send',
          requestAlertCountLimit: 'You can send',
          sentRequests: 'Sent request',
          requestAlertSendDisabled: 'Sending new request is not available',
          sendSuccessMessage: 'Request is sended!',
          requestStatus: {
            inProgress: 'The reception goes from {0} to {1}',
            willStart: 'The reception will start with {0}',
            ended: 'The reception is over {0}',
          },
          deleteSuccess: 'Delete successfully!',
          requestAlertLimit:
            'The limit has been reached. To submit a new request, delete the previously submitted one',
          newRequestTitle: 'New request',
          sendBtn: 'Join',
        },
      },
    },
  },
}

export async function GET_I18N_DATA_MOCK() {
  return await onResponse(I18N_DATA_MOCK)
}
